Gliederung 

1. Anforderungsdefinition

2. Analyse
	2.1 Datenanalyse 
	2.2 Funktionsanalyse
		2.2.1 Klassenmodell
		2.2.2 Desktopanwendung
		2.2.3 Android-App
		
	2.3 Disgn Analyse
		2.3.1 Desktopanwendung
		2.3.2 Ándroid-App
	
3. Entwicklungsverfahren
	3.1 Datenbank
	
	3.2 Desktopanwendung
	
	3.3 Android-App
	
4. Testverfahren

5. Ablauf der Übergabe

6. Weiterentwicklung der Applikation

7. Selbständigkeitserklärung

8. Anlageverzeichnis 

9. Quellenverzeichnis 



	
		Als die 
		Wie beim zusammenschreiben dieser Daten schon aufgefallen ist, stehen diese ganzen Daten in Beziehungen zueinander und so kommt es, dass im nächsten schritt die Beziehungen zwischen deny Daten in einem Entity Relationship Digramm erstellt wurden. Dabei ergab sich, dass ein Kunde n viele Mieteverträge und n viele Rechnugen haben kann. Der Mietvertrag und die Rechnug hingegen können nur jeweils einen Kunden beinhalten. Das Gerät kann in n vielen Rechnugen und Mieteverträgen stehen und ebnso können auch n viele Geräte in dem Mietevertrag und in der Rechnug stehen.
		
		ER
		
		 Der Konktretisierung folgend, muss zum Kunden der Nachnamen, der Vornamen, der Wohnort, die Postleitzahl, die Strasse, die Hausnummer und seinen Mitgliedstatus speichern. Zum Gerät muss die Bezeichnung, der Anschaffungspreis, das Anschaffungsdatum, die Mietpreise klasse eins, zwei, drei, der Zustand und die Produktgruppe gespeichert werden. Zum Mietvertrag muss man das Abgabedatum, das Rückgabedatum, den Rückgabestatus und natürlich auch den Kunden und die Gemieteten Geräte. Schlussendlich muss man dann in der Rechnung den Mietvertrag, das Rechnungsdatum, den Preis, den Rechnungstatus und die Kundendaten für die Rechnungsechtheit speichern.
	
	
			
			UC
		
		
			
	
	
		
		
	

	
		DB - Modell
		
		3.1.2 Rechnungspeicherung 
	
		
		
			
	
			

			 	
		3.2.4 Kundehinzufügen/bearbeiten 
			Für das Hinzufügen eines neuen Kunden und für das Bearbeiten eines schon vorhanden Kunden, wird durch ein einziges JDialog Fenster gelöst. Dies bringt die vorteile mit sich, das man zum einen Programmierarbeit spart und das, dass Programm nicht riesen groß wird. Damit dieses Dialogfenster beide funktionen beherscht, wurde in den Konstruktor des Dialoges noch die Übergabe eines Kunden eingepflegt. Ist dieser beim Aufruf null dann wird ein neuer Kunde hinzugefügt und ist in dieser Variable beim Aufruf ein Kunde gespeichert dann wird ein Kunde bearbeitet. Diese Lösung ermöglicht es in einer Variable die schon zu bearbeitenden Kundendaten mit zu übergeben.
			Trotz des gleichen Dialogs, sind die Aufrufe von der Ausgangseite unterschiedlich, da das hinzufügen keinen schon vorhandenen Kunden benötigt und das bearbeiten schon. Somit wird das hinzufügen direkt ausgeführt sobald man auf dem Button dazugehörigen Button klickt. Das bearbeiten wiederum benötigt die auswahl eines Kunden aus der JTabel im Zentrum. Wird nach der Auswahl, der Button zum bearbeiten gedrückt, so wird anhand der Kunden id aus der Tabelle der gesamte Kunde erneut aus der Datenbank geladen, damit dieser als Kunden variable dem Dialog übergeben werden kann. 
			Der Dialog an sich besitz für jedes Attribut des Kunden, außer für die Kunden id ein eingabe Feld. Wirde der Kunde hinzugefügt sind diese Felder beim öffnen alle leer. Beim bearbeiten hingegen sind die Felder schon mit den Kundendaten von dem übergebenen Kunden gefüllt. Der letzte schritt des vorgangs ist das Speichern bzw. das Updaten des Kundes. Dies wird jeweils durch die Methoden speichern() und update() im Kunden druchgefürht, welche intern wiederum auf die DB klasse und passende Methoden zugreift. 
				
 
		3.2.5 Geräthinzufügen/bearbeiten
			Grundliegend ist das Hinzufügen und das Bearbeiten des Gerätes gleich wie bei dem Kunden. Zu dem vorgehen vom Kunden Hinzufügen und Bearbeiten gibt es hier nur zwei unterschiede. Erstens, beim Gerät bearbeiten sind nur das Anschaffungsdatum, der Anschaffungspreis, der Zustand und die Produktgruppe änderbar um die Rechnungsechheit zu Wahren, da Geräte nicht wie der Kunde doppelt in der Rechnung gespeichert werden. Der zweite Unterschied ist es, dass für die Eingabe des Anschaffungsdatum ein Swing Element namens JDatePicker genutz wurde, welches falscheingaben des Datums verhindert. Dieses Element ist nicht direkt in Swing enthalten und wurde von GitHub im Projekt importiert, weiteres zu dem Element findet man unter 3.2.5 JDatePicker.
				
			
		3.2.6 Mietvertrag und Rechnung hinzufügen
			Für das Hinzufügen neuer Mieteverträge, welche in einer Rechnung zusammengefügt werden, wird die Auswahl eines Kunden, die Auswahl mehrer Geräte und ein Abgabedatum wie auch ein Rückgabedatum benötigt. Da diese schwer in einem einem eizigen Fester umsetzbar ist und dadruch die übersichtlichkeit verloren gehen würde, wurde dieses Problem anderweitig gelöst. Diese Problem wurde gelöst, indem man druch verschiedene Dialoge durchgereicht wird, bei denen man nach und nach die benötigten Daten auswaählen und eintragen kann. Die umgesetzung dieses Pfades an JDialogen kann man dem Activity Diagramm im Anhag entnehmen.  
			
		3.2.7 Mietevertrag und Rechnung bearbeiten
			Da die Rechnungsechtheit gewährleistet werden muss, kann bei dem Mietvertag und bei der Rechnung nur jeweils der Status geänder werden. Denn dieser Wert verändert die Rechnung nicht, da er nur intern benötigt wird. Bei in der Rechnung gibt er an ob die Rechnung schon bezahlt wurde und im Mietvertrag ob den das Gerät schon zurückgegeben wurde. Somit wird nach dem Auswählen einer Zeile, welche eine Rechnung oder einen Mietvertrag darstellt und dem betätigen des Button ändern lediglich der Status wert von false auf true gesetzt. Intern wird diese Funktion durch die DB Klasse umgestzt, welche für dieses ändern passende Mehtoden besitzt.

		3.2.8 Kunde löschen 
			Beim löschen des Kunden muss darauf geachtet werden, das der Kunde in beziehung zum Mietvertrag steht. Dies stellt in der Datenbank ein Problem da, da ein Tupel in Kunde nur gelöscht werden kann, wenn auch alle Tupel in Mietevertrag gelöscht werden, welche mit dem Kunden verknüpft sind. Da durch das Löschen, die Rechnungsechtheit gefährdet wird, wurde das Löschen eines Kunden anderweitig umgesetzt. Somit geschieht das löschen eines Kunden indem alle Kundendaten aus dem Tupel gelöscht werden, und nur die ID behalten wird. Da in der Rechnung die für die Rechnung benötigten Kundendaten noch gespeichert sind, wird die Rechnungsechtheit mit der Lösung gefährdet.
		
		3.2.9 Gerät löschen 
			Das entgültige löschen eines Gerätes aus der Datenbank ist nur möglich, wenn es noch nie vermietet wurde, da es wie der Kunde mit dem Mietevertrag verknüpft ist. Somit gibt diese funktion nur her, das ein falscheintrag eines Gerätes dirket gelöscht werden muss. Somit wird nach dem anwählen eines Gerätes und dem betätigen des löschenbuttons zunächst geprüft, ob das Gerät schon einmal vermietet wurde, ist dies nicht der Fall, so wird es gelöscht. Wurde diese Gerät schon einmal vermietet, so wird der Zustand des Gerätes auf defekt gesetzt, welches impliziert, das ein Gerät nicht mehr bei der Wahl der zu vermietenden Geräte angezeigt wird.
		
		3.2.10 Mietevertrag und Rechnug löschen
			Das Löschen dieser Daten ist nur vorgesehen um falscheingaben direkt zu Löschen, da keine Relation vom Mietvertrag abhänging ist, kann dieser ohne das etwas zu beachten wird gelöscht werden. Beim Löschen einer Rechnung funktionniert dies nicht, da diese in Beziehung zum Mietvertrag stehen und demnach müssen alle Mietvertäge die in einer Rechnung stehen gelöscht werden, bevor man die Rechnung löschen kann. 
			
		3.2.11 Rechnung Drucken 
			Das Drucken der Rechnung stellt zunächst das Problem da, denn eine Rechnung als Dokument untersteht nicht nur der Rechnungsechtheit sonder auch gewissen normen der Formatierung.  
		
		3.2.12 Diagramme
		
		3.2.5 JDatePicker
			Der JDatePicker ist ein Swing Element welches die Wahl eines Datums extrem erleichtert und falsch eingaben verhindert. Dies wird ermöglicht, indem das Datum nicht direkt als Datum eingegeben wird, sondern in dem das Datum über einen klick aus einem kleinen Kalenderdialog aufgerufen wird. Dieses wurde von Juan Heyns und weiteren Entwicklern entwickelt und kostenfrei zur benutzung auf GitHub zur verfügung gestellt. 
			Da in der zu entwickelden Desktopanwendung an mehreren stellen die eingabe des Datums benötigt wird, wurde sich dafür entschieden diese Swing Element und dessen Biliothekt zu nutzen.
			
			
		3.2.6 Drucken 
			Für das Drucken eines gesamten Panels wurde ebenfalls fremder Quelltext genutzt. Dieser sind die Klassen PrintSuit.java und PrintPanel.java von Herta Boer welche online zur verfügung gestellt wurden. Die Klasse PrintSuit, welche von der Klasse PrintPanel abgeleitet ist, ermöglicht es ganz einfach ein Panel, welches von dem Konstruktor des PrintPanels übergeben wurde durch die Methode print zu drucken. Dieses wird zum Drucken des Rechnungspanels in der Applikation genutzt. 
			
		
		
		
				
			
			
		

7. Selbstständigkeitserklärung 
	Hiermit erkläre ich, dass ich die vorliegende Arbeit selbstständig und ohne fremde Hilfe verfasst und keine anderen Hilfsmittel als
	angegeben verwendet habe. Insbesondere versichere ich, dass ich alle wörtlichen und sinngemäßen Übernahmen aus anderen Werken als 
	solche kenntlich gemacht habe. 

	Ort: Datum: Unterschrift:
	
	
Fragen an Herr Wehle 
	- Kunden Löschen 
	- JFreeChart 
